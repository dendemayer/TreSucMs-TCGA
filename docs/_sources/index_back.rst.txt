.. DESeq2_pipeline documentation master file, created by
   sphinx-quickstart on Sun Jan 31 20:05:33 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.  ..autofunction:: 
    .. automodule:: main_deseq
  .. automodule:: main_deseq.call_with_options

  .. automodule:: main_deseq.create_matrix_new
    :members: meta_filter, download_clinical_tables

  .. automodule:: main_deseq.lifeline_summary_test_2
    :members: Lifeline_plot, lifelines_ENSG

    .. automodule:: main_deseq.call_with_options
    .. automodule:: main_deseq.call_with_options
    ### 

    .. automodule:: main_deseq
   :members:
    .. autoclass:: lifeline_summary_test_2.Lifeline_plot
      :members:
    .. autofunction:: main_deseq.call_with_options 
    ..autofunction:: main_deseq.call_with_options
    Welcome to DESeq2_pipeline's documentation!
    ===========================================
.. toctree::
   :maxdepth: 2
   :caption: Contents:
    documentation/installation


Documentation: TreMSuc for TCGA
***************************************

"TreMSuc" a tool to choose, harvest and analyse expression data of
the TCGA-projects with help of the DESeq2 R package

Build and activate the provided conda env:
------------------------------------------

.. code-block:: bash

    $ conda env create -f deseq_env.yaml
    $ conda activate deseq_pipeline

call the script without any options to enter the interactive mode and set
each option step by step:

.. code-block:: bash

    $ python main_deseq.py

print help page:

.. code-block:: bash

    $ python main_deseq.py --help

Usage: main_deseq.py [OPTIONS]

Options:
  -D, --download_data      perform download and merging steps, without the
                           DESeq2 analysis

  -A, --analyse_data       perform the DESeq2 analysis (the download step must
                           be completed in prior for your chosen projects)

  -o, --out_path TEXT      The Path, where all results are saved to.

  -p, --project TEXT       TCGA project to be applied. Any TCGA project can be
                           choosen, like: -p TCGA-CESC -p TCGA-HNSC ...

  -d, --drugs TEXT         drug(s), like: -d drug1 -d drug2 or
                           drugcombination(s), like: -d drug1,drug2

  -f, --function INTEGER   running functions separately, important for the
                           snakemake functionality. Look up the documentation
                           or the man page for detailed description  of each
                           function
  -t, --threshold INTEGER  threshold for a higher division of the kaplan meier
                           plots  [default: 0]
  -s, --snakerun           needed for the snakemake functionality, NOT to be
                           set manually by the user
  -c, --cutoff FLOAT       cutoff parameter: convert dead cases to alive cases
                           if they outlive the cutoff parameter (in years) no
                           conversion performed if default (or no) value
                           applied  [default: 0]

  -v, --version            printing out version information: Version 1.0
  --help                   Show this message and exit.

Short tutorial:
---------------
Performing an example analysis:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The easiest way of applying a run is entering the interactive mode (it is
supposed that you cloned the deseq_pipeline git repository and cd into that
dir):

.. code-block:: bash

  $ python main_deseq.py

With it, every needed parameter is offered for further analyses. First, the
available projects are presented, based on that selection, available drugs
or drug combinations can be chosen.
  
In contrast to that, the parameter needed could be applied via command line.
An example terminal call for the projects TCGA-CESC and TCGA-HNSC together with
the drug cisplatin and the combination carboplatin,paclitaxel would be:

.. code-block:: bash

  $ python main_deseq.py -p TCGA-CESC -p TCGA-HNSC
  -d cisplatin -d carboplatin,paclitaxel -o /OUTPUT_path -D -A

First of all, the needed data for the selected projects is loaded via the
TCGA API and stored in:   

* /OUTPUT_path/TCGA-CESC/TCGA-CESC_data_files/ and
* /OUTPUT_path/TCGA-HNSC/TCGA-HNSC_data_files/


Intermediate merged tables and additional meta_data tables are stored in the
project directories:   

* /OUTPUT_path/TCGA-CESC/
* /OUTPUT_path/TCGA-HNSC/


First, single project analyses are performed. The actual analysis is
determined by the project, and by the drugs combination. The directory for
the drugs combination is created out of the applied drugs, so here, the
DRUGS_title is 'carboplatin,paclitaxel_cisplatin'.  


Everything below that drugs directory, is restricted to the chosen drugs
s.t. the results of both single project analyses are placed in:  

* /OUTPUT_path/TCGA-CESC/carboplatin,paclitaxel_cisplatin/
* /OUTPUT_path/TCGA-HNSC/carboplatin,paclitaxel_cisplatin/


After the single project analysis, the projects are combined. Those results
are stored in an additional directory, composed out of the applied projects,
so here, the PROJECT_title is: 'TCGA-CESC_TCGA-HNSC', those results are saved
in the directory:  

* /OUTPUT_path/TCGA-CESC_TCGA-HNSC/carboplatin,paclitaxel_cisplatin/


Since the analysis is determined by the project and drug combination, results
for 3 different approaches are created, two for the single projects and one
for the aggregation of the two projects. For all of them, a respective
REPORT.pdf is created, containing a summarized representation of the most
important results and plots, along with some explanations to them. They are
stored at:

* /OUTPUT_path/TCGA-CESC/carboplatin,paclitaxel_cisplatin/REPORT.pdf
* /OUTPUT_path/TCGA-HNSC/carboplatin,paclitaxel_cisplatin/REPORT.pdf
* /OUTPUT_path/TCGA-CESC_TCGA-HNSC/carboplatin,paclitaxel_cisplatin/REPORT.pdf

Recreate the performed analysis:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To rerun the analysis and reproduce all the outputs and results created with
it, a single Snakemake configuration file is created. It is stored in the
cloned repository location under the 'Snakes' subdir.
Since the analysis is determined by the composition of projects and drugs, the
unique filename of this configuration file is composed out of it. For the
example with CESC and HNSC, together with cisplatin and carboplatin,paclitaxel,
that would be:

* SCRIPT_path/Snakes/snakemake_config_TCGA-CESC_TCGA-HNSC_carboplatin,paclitaxel_cisplatin.yaml

The Snakefile needed is also hold available at:

* SCRIPT_path/Snakes/Snakefile 

This file must be edited and the path to the config yaml file, the OUTPUT_path
and the SCRIPT_path must be inserted.

With that, the Snakefile is configured to run the analyses again. Change the
directory into the SCRIPT_path/Snakes/ path and run for example:

.. code-block:: bash

   $ snakemake --cores 7

This would use 7 cores of your machine if available and make use of
parallelisation of steps where it is feasible.

Direct function calling via terminal call:
------------------------------------------

The possibility to call some functions directly through the terminal is
necessary for the Snakemake functionality, but not an actual use case, besides
of function 11.

The -D option is an alias to call function 1 to 6, the -A option is an alias to
call function 7 to 15.

If you want to add a new threshold for your Kaplan Meier plots, this could be
done with function 11. The config yaml file is updated automatically, s.t. this
would be included to your fixed workflow.

* :ref:`-f 1 meta_filter() <function_1>`
* :ref:`-f 2 download_clinical_tables() <function_2>`
* :ref:`-f 3 download_data_files() <function_3>`
* :ref:`-f 4 merging_meta_infos() <function_4>`
* :ref:`-f 5 create_summary_table() <function_5>`
* :ref:`-f 6 correct_drugs() <function_6>`
* :ref:`-f 7 provide_DESeq2_table() <function_7>`
* :ref:`-f 8 create_statistics_from_DESeq2_tables() <function_8>`
* :ref:`-f 9 provide_DESeq2_table() <function_9>`
* :ref:`-f 10 create_statistics_from_DESeq2_tables() <function_10>`
* :ref:`-f 11 lifelines_ENSG() <function_11>`
* :ref:`-f 12 drug_frequency() <function_12>`
* :ref:`-f 13 create_report_pdf() <function_13>`
* :ref:`-f 14 drug_frequency_all_single_projects() <function_14>`
* :ref:`-f 15 create_snake_config() <function_15>`

..The DESeq2 pipeline specific threshold parameter:
..-------------------------------------------------
..With the -T parameter the gene specific Kaplan-Meyer plots can be
..adjusted. The plots are created for both, the 10 most differentially expressed
..genes in the alive cases and in the dead cases. Based on the normalized
..countmatrix given by DESeq2, the median of the count values serve as pivot
..element for the division of cases in the groups UP and DOWN and are plotted
..accordingly to those groupings.
..It was desired to achieve a better separation of the graphs, with help
..of the threshold parameter. Therefore, counts from cases lying to close to the
..median shall be omitted. The threshold determines the percentage
..depending on the pivot element, in what range around of it counts of respective
..cases shall be omitted, invoking cases to the plot which show a more clear
..expression level either above or below the median.

Documentation of modules, classes and functions:
------------------------------------------------

.. automodule:: main_metilene
    :members: call_with_options

    .. automodule:: create_matrix_new
    :members:

    .. automodule:: choose_therapy
    :members:


    .. automodule:: lifeline_summary_test_2
    :members:

    .. automodule:: walk_all_drug_frequency
    :members:

    .. automodule:: create_report
    :members:


Tables
------

* :ref:`summary_DF_example`
* :ref:`multiindex_table`
* :ref:`ENSG_table`
* :ref:`lifeline_table`

Indices and tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
